// @hulo:build batch

// netsh [OPTIONS] [COMMAND]
// Network shell (netsh) is a versatile and comprehensive command-line utility for configuring, managing, and monitoring network components and server roles on Windows and Windows Server systems. With netsh, you can view and modify network settings, automate tasks, and troubleshoot network issues locally or remotely.
// 
// In many scenarios, the netsh commands offer equivalent functionality to the Microsoft Management Console (MMC) snap-ins for managing networking server roles and features. This allows administrators to perform configuration and management tasks either through the graphical MMC interface or by using command-line automation.
// 
// For example, you can configure Network Policy Server (NPS) by using either the NPS MMC snap-in or the netsh commands in the netsh nps context. In addition, there are netsh commands for network technologies, such as for IPv6, network bridge, and Remote Procedure Call (RPC), that aren't available in Windows Server as an MMC snap-in.
cmd netsh {
    // -a, --alias-file
    // Specifies that you want to return to the netsh shell after running an alias file. 
    // An alias file is the text file that contains one or more netsh commands.
    aliasFile: str

    // -c, --context
    // Enters the specified netsh context. 
    // The context represents a specific set of available commands related to a particular feature or function.
    context: str

    // -r, --remote-machine
    // Specifies that you want the command to run on a remote computer using its computer name,
    // a fully qualified domain name (FQDN), or IP address. 
    // The Remote Registry service must be running on the remote computer.
    // If it's not running, Windows displays a "Network Path Not Found" error message.
    // 
    // If you specify -r followed by another command, netsh runs the command on the remote computer and then returns to the command prompt. 
    // If you specify -r without another command, netsh opens in remote mode. 
    // The process is similar to using set machine at the netsh command shell. 
    // When you use -r, you set the target computer for the current instance of netsh only.
    remoteMachine: str

    // -u, --user
    // Specifies that you want to run the netsh command under a specific user account using DomainName\Username format.
    user: str

    // -p, --password
    // Specifies that you want to provide a password for the user account. 
    // If * is used, this specifies you want to securely enter the password.
    password: str

    // -f, --script-file
    // Specifies that you want to exit netsh after executing the commands from the script file you provide.
    scriptFile: str

    // netsh add
    // The netsh add command is used to install helper Dynamic Link Libraries (DLL) allowing for more specialized network configurations.
    cmd add {
        // netsh add helper [file]
        cmd helper {
            // Adds a helper DLL file.
            @option("file")
            file: str
        }
    }

    // netsh delete
    // The netsh delete command is used to remove helper Dynamic Link Libraries (DLL) allowing for more specialized network configurations.
    cmd delete {
        // netsh delete helper [file]
        cmd helper {
            @option("file")
            file: str
        }
    }

    // netsh dhcpclient [list | help | trace]
    // The netsh dhcpclient command is used to configure and manage settings for the DHCP client,
    // including enabling tracing and exporting diagnostic logs.
    cmd dhcpclient {
        // Lists the available commands in the netsh dhcpclient context.
        cmd list {}

        // Provides help for the list of commands available in the netsh dhcpclient context.
        cmd help {}

        // Controls tracing for the DHCP client, allowing you to enable or disable it. 
        // This feature is helpful for troubleshooting as it generates detailed logs of DHCP client activities.
        // You can retrieve the last 100 traces to review recent DHCP interactions.
        cmd trace {
            cmd enable {}

            cmd disable {}

            cmd dump {}
        }
    }

    cmd dnsclient {
        cmd add {
            // Adds a new DNS server IP address to the statically configured list. 
            // By default, the DNS server is appended to the end of the list. 
            // If an index is specified, the server is inserted at that position, shifting other entries as needed. 
            // If DNS servers were previously assigned via DHCP, the new address replaces the existing list. 
            // When the validate option is set to yes, the newly added DNS server is validated.
            cmd dnsserver {
                // -n, --name
                // The name or index of the network interface to which the DNS server is added.
                @Serialize("name={}")
                name: str

                // -a, --address
                // The IP address of the DNS server to add.
                @Serialize("address={}")
                address: IP

                // -i, --index
                // Sets the order of preference for the DNS server address.
                @Serialize("index={}")
                index: num

                // -v, --validate
                // Determines whether the DNS server address should be validated.
                @Serialize("validate={}")
                validate: "yes" | "no" = "yes"
            }

            // Adds a new encrypted DNS server to the list of statically configured secure resolvers.
            cmd encryption {
                // -s, --server
                // Specifies the IP address of the encrypted DNS server to add.
                @Serialize("server={}")
                server: IP

                // -d, --dohtemplate
                // Defines the DoH template to use for the server.
                dohtemplate: str

                // -h, --dothost
                // Sets the DoT host for the server. 
                // Format: hostname:port. Use : for the default configuration.
                @Serialize("dothost={}")
                dothost: str

                // -a, --autoupgrade
                // Indicates whether queries to this server should automatically upgrade to DoH or DoT.
                @Serialize("autoupgrade={}")
                autoupgrade: "yes" | "no"

                // -u, --udpfallback
                // Determines if UDP/TCP should be used for this server if DoH queries fail.
                @Serialize("udpfallback={}")
                udpfallback: "yes" | "no" = "yes"
            }

            // Adds a global DNS configuration
            cmd global {
                // -d, --doh
                // Configures the global DoH settings. 
                // No disables DoH for the DNS client. 
                // Yes enables DoH usage according to interface, server, or other configurations. 
                // Auto forces all recognized DoH servers to use only DoH.
                @Serialize("doh={}")
                doh: "yes" | "no" | "auto"

                // -t, --dot
                // Configures the global DoT settings. 
                // No - disables DoT for the DNS client. 
                // Yes enables DoT usage according to interface, server, or other configurations.
                @Serialize("dot={}")
                dot: "yes" | "no"

                // -r, --ddr
                // Configures the global Discovery of Designated Resolvers (DDR) settings. 
                // No disables DDR for the DNS client. 
                // Yes enables DDR usage according to interface, server, or other configurations.
                @Serialize("ddr={}")
                ddr: "yes" | "no"
            }

            // Adds or configures DNS client settings for a specific network interface.
            cmd interface {
                // -n, --name
                // The name or index of the network interface to configure.
                @Serialize("name={}")
                name: str

                // -r, --ddr
                // Enables or disables DDR for unencrypted DNS servers on the specified adapter. 
                // Yes performs DDR on all unencrypted servers configured for the adapter. 
                // No doesn't perform DDR by default on unencrypted servers for the adapter.
                @Serialize("ddr={}")
                ddr: "yes" | "no"

                // -f, --ddrfallback
                // Specifies whether to allow fallback to unencrypted name resolution if secure resolution using DDR fails. 
                // Yes enables fallback to unencrypted name resolution. 
                // No disables fallback to unencrypted name resolution (default: disabled).
                @Serialize("ddrfallback={}")
                ddrfallback: "yes" | "no"
            }
        }

        cmd delete {
            // Removes statically configured DNS server IP addresses from a specified interface. 
            // If the validate option is set to yes, the remaining DNS servers are validated after deletion.
            cmd dnsserver {
                // -n, --name
                // Specifies the name or index of the network interface from which DNS servers are deleted.
                @Serialize("name={}")
                name: str

                // -a, --address
                // Indicates which DNS server addresses to remove. 
                // You can specify a particular IP address to delete a single DNS server, 
                // or use all to remove all configured DNS server addresses from the interface.
                @Serialize("address={}")
                address: IP

                // -v, --validate
                // Determines whether the DNS server settings should be validated after deletion. 
                // By default, validation is enabled (yes).
                @Serialize("validate={}")
                validate: "yes" | "no"
            }

            // Deletes encrypted DNS server configurations from the list of statically configured secure resolvers.
            cmd encryption {
                // -s, --server
                // Specifies the IP address for the encrypted DNS server removal.
                @Serialize("server={}")
                server: IP

                // -p, --protocol
                // Specifies the encryption protocol removal from the server.
                @Serialize("protocol={}")
                protocol: "doh" | "dot"
            }

            // Restores the DNS settings to default values.
            cmd global {
                global: "doh" // Restores the default DoH global setting.
                    | "dot" // Restores the default DoT global setting.
                    | "ddr" // Restores the default DDR global setting.
                    | "all" // Restores all settings to their default values.
            }

            // Restores the interface DNS settings to default values.
            cmd interface {
                // -n, --name
                // Specifies the name or index of the network interface whose DNS settings you want to restore to default.
                @Serialize("name={}")
                name: str

                // -s, --setting
                // Indicates which DNS setting on the interface should be reset. 
                // Use all to restore all settings to their default values, or ddr to restore only the DDR setting to its default.
                @Serialize("setting={}")
                setting: "ddr" | "all"
            }
        }

        // Outputs a configuration script containing the current DNS client settings.
        cmd dump {}

        cmd set {
            // Configures the DNS server settings to use either DHCP or a static list of DNS server IP addresses for the specified interface. 
            // The address option is available only when the source is set to static. 
            // If the validate option is set to yes, the newly configured DNS server is validated.
            cmd dnsserver {
                // -n, --name
                // Specifies the name or index of the network interface.
                @Serialize("name={}")
                name: str

                // -s, --source
                // Determines how DNS servers are configured for the interface. 
                // Use dhcp to obtain DNS servers automatically via DHCP, or static to specify DNS servers manually.
                @Serialize("source={}")
                source: "dhcp" | "static"

                // -a, --address
                // Sets the DNS server IP address. Provide an IP address to add a DNS server, or use none to clear the list of DNS servers.
                @Serialize("address={}")
                address: IP | "none"

                // -r, --register
                // Controls Dynamic DNS registration. 
                // Use none to disable registration, primary to register only under the primary DNS suffix, or both to register under both the primary and connection-specific suffixes.
                @Serialize("register={}")
                register: "none" | "primary" | "both"

                // -v, --validate
                // Indicates whether the DNS server setting should be validated. Default value is yes.
                @Serialize("validate={}")
                validate: "yes" | "no"
            }

            // Configures the encrypted DNS server settings in the list of statically defined secure resolvers.
            cmd encryption {
                // -s, --server
                // Specifies the IP address of the encrypted DNS server to modify.
                @Serialize("server={}")
                server: IP

                // -d, --dohtemplate
                // Sets the DoT host for the server. 
                // Provide as hostname:port. Use : for the default configuration.
                @Serialize("dohtemplate={}")
                dohtemplate: str

                // -h, --dothost
                // Indicates whether queries to this server should automatically upgrade to DoH or DoT.
                @Serialize("autoupgrade={}")
                autoupgrade: "yes" | "no"

                // -u, --udpfallback
                // Determines if UDP/TCP should be used for this server if DoH queries fail.
                @Serialize("udpfallback={}")
                udpfallback: "yes" | "no"
            }

            // Configures the global DNS configuration.
            cmd global {
                // -d, --doh
                // Is the global DoH setting. No forbids the use of DoH by the DNS client. 
                // Yes allows DoH use based on interface, server, or other configurations. 
                // Auto forces all well-known DoH servers to use only DoH.
                @Serialize("doh={}")
                doh: "yes" | "no" | "auto"

                // -t, --dot
                // Is the global DoT setting. 
                // No forbids the use of DoT by the DNS client. 
                // Yes allows DoT use based on interface, server, or other configurations.
                @Serialize("dot={}")
                dot: "yes" | "no"

                // -r, --ddr
                // Is the global DDR setting. 
                // No disables the use of DDR by the DNS client. 
                // Yes enables DDR use based on interface, server, or other configurations.
                @Serialize("ddr={}")
                ddr: "yes" | "no"
            }

            // Configures interface specific DNS settings.
            cmd interface {
                // -n, --name
                // Specifies the name or index of the interface to be configured.
                @Serialize("name={}")
                name: str

                // -r, --ddr
                // Specifies the interface-specific DDR settings. 
                // Yes performs DDR on all unencrypted servers configured on the specified adapter. 
                // No doesn't perform DDR by default on unencrypted servers configured on the specified adapter.
                @Serialize("ddr={}")
                ddr: "yes" | "no"

                // -f, --ddrfallback
                // Specifies if servers should fall back to unencrypted name resolution if secure resolution using DDR-retrieved settings fails, 
                // provided per-adapter DDR is enabled. Fallback is disabled by default. 
                // Yes enables fallback to unencrypted name resolution. 
                // No disables fallback to unencrypted name resolution.
                @Serialize("ddrfallback={}")
                ddrfallback: "yes" | "no"
            }
        }

        cmd show {
            cmd encryption {
                // -s, --server
                // Displays the encrypted DNS server settings from the list of statically configured secure resolvers. If no server is specified, information for all encrypted DNS servers is shown.
                @Serialize("server={}")
                server: IP
            }

            // Displays all configured DNS global settings.
            cmd global {}

            // Displays the current configuration and status of the DNS client.
            cmd state {}
        }

        // -h, --help
        // Provides help for the list of commands available in the netsh dnsclient context.
        @Serialize("/?")
        help: bool
    }

    // exec [file]
    cmd exec {
        // Loads and runs the target script file.
        @option("file")
        scriptFile: str
    }

    cmd namespace {
        // Outputs a configuration script containing the current namespace policy settings.
        // This script can be saved and used to restore settings if needed.
        cmd dump {}

        // show {effectivepolicy | policy} [namespace]
        // Displays information about namespace policies.
        cmd show {
            // -n, --namespace
            // Specifies the namespace to display policy information for.
            @Serialize("namespace={}")
            namespace: str
        }

        // Provides help for the list of commands available in the netsh namespace context.
        cmd help {}
    }
}

fn test_netsh() {
    netsh dhcpclient list;
    netsh dhcpclient help;
    netsh dhcpclient trace enable;
    netsh dhcpclient trace dump > "C:\\NetshTrace\\dhcp_trace.txt";
    netsh namespace show effectivepolicy;
    netsh namespace show policy;
    netsh namespace show policy --namespace "Computer";
}